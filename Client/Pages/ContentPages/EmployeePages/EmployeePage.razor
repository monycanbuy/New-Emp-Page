@implements IDisposable
@if (allState.ShowEmployee)
{
    if (ShowMainPage)
    {
        <div class="container-fluid mt-5">
            <div class="row">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-header">
                            <button class="btn btn-outline-success" @onclick="ShowAddOrUpdateEmployeeButtonClicked">
                                <i class="bi bi-plus-circle-dotted"> </i> Add Employee
                            </button>
                        </div>
                        <div class="card-body">
                            @{
                                var Tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" });
                            }
                            <SfGrid DataSource="@Employees" AllowPaging="true" AllowSorting="true"
                                    Toolbar=@Tool AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
                                <GridColumns>
                                    <GridColumn HeaderText="Employee Image">
                                        <Template>
                                            @{
                                                var employee = (context as Employee);
                                                <div class="image">
                                                    <img src="@employee!.Photo" alt="@employee.Name" width="70" height="70" />
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(Employee.EmpId) HeaderText="Employee ID"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.Name) HeaderText="Name"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.Phone) HeaderText="Telephone"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.JobName) HeaderText="Job Name"></GridColumn>
                                    <GridColumn HeaderText="Branch">
                                        <Template>
                                            @{
                                                var employee = (context as Employee);
                                                <div>
                                                    @employee!.Branch!.Name
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn HeaderText="Employee Image">
                                        <Template>
                                            @{
                                                var employee = (context as Employee);
                                                <div>
                                                    @employee!.City!.Name
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn HeaderText="Menu" HeaderTextAlign="TextAlign.Left">
                                        <Template>
                                            @{
                                                var employee = (context as Employee);
                                                <i class="bi bi-menu-down text-primary" id="cursorStyle" @onclick="()=>ShowMenuPopUp(employee!)"></i>
                                            }
                                        </Template>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                        <div class="card-footer">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}

<AddOrUpdateEmployeePage @ref="addOrUpdateEmployee"
                         Employee="Employee"
                         ShowAddOrUpdateEmployee="ShowAddOrUpdatePage"
                         NotifyParentFormCloseClicked="NotifyParentFormCloseClicked"
                         Countries="DefaultCountries"
                         Cities="SelectedCities"
                         States="SelectedStates"
                         GeneralDepartments="DefaultGeneralDepartments"
                         Departments="SelectedDepartments"
                         Branches="SelectedBranches"
                         Genders="DefaultGenders"
                         HandleCountrySelectedEvent="HandleCountrySelectedEvent"
                         HandleStateSelectedEvent="HandleStateSelectedEvent"
                         HandleGeneralDepartmentSelectedEvent="HandleGeneralDepartmentSelectedEvent"
                         HandleDepartmentSelectedEvent="HandleDepartmentSelectedEvent"
                         HandleSaveEmployeeClickedEvent="HandleSaveEmployeeClickedEvent">
</AddOrUpdateEmployeePage>

<EmployeeDetailPage EmployeeDetails="Employee"
                    ShowDetailsPage="ShowDetailsPage"
                    HandleDetailsPageCloseBtnClicked="HandleDetailsPageCloseBtnClicked" />

<ContextsMenu @ref="contextMenu"
             HandleDeleteClicked="DeleteClicked"
             HandleEditClicked="EditClicked"
             HandleViewClicked="ViewClicked" />

@* <DoctorDialog @ref="doctorDialog" Doctor="Doctor" HandleSaveOperationEvent="SaveHealthEvent" />

<OvertimeDialog @ref="overtimeDialog" ItemModel="Overtime" OvertimeTypes="OvertimeTypes"
                HandleSaveOperationEvent="SaveOvertimeEvent" />

<SanctionDialog @ref="sanctionDialog" ItemModel="Sanction" SanctionTypes="SanctionTypes"
                HandleSaveOperationEvent="SaveSanctionEvent" />

<VacationDialog @ref="vacationDialog" ItemModel="Vacation"
                VacationTypes="VacationTypes" HandleSaveOperationEvent="SaveVacationEvent"  />*@
@code {
    private SfGrid<Employee>? DefaultGrid;
    AddOrUpdateEmployeePage? addOrUpdateEmployee;
    public List<Employee> Employees { get; set; } = [];
    public Employee Employee { get; set; } = new();

    // Country  / State / Town
    public List<Country> DefaultCountries { get; set; } = [];
    public List<State> DefaultStates { get; set; } = [];
    public List<City> DefaultCities { get; set; } = [];

    public List<Gender> DefaultGenders { get; set; } = [];
    

    // General Department / Department / Branch
    public List<GeneralDepartment> DefaultGeneralDepartments { get; set; } = [];
    public List<Department> DefaultDepartments { get; set; } = [];
    public List<Branch> DefaultBranches { get; set; } = [];

    public List<Department> SelectedDepartments { get; set; } = [];
    public List<Branch> SelectedBranches { get; set; } = [];
    public List<State> SelectedStates { get; set; } = [];
    public List<City> SelectedCities { get; set; } = [];

    public List<Gender> SelectedGenders { get; set; } = [];
    

    protected async override Task OnInitializedAsync()
    {
        allState.Action += StateHasChanged;
        await LoadEmployees();
        await LoadDefaults();
        // await GetOvertimeTypes();
        // await GetSanctionTypes();
        // await GetVacationTypes();
    }

    private async Task LoadDefaults()
    {
        DefaultCountries = await countryService.GetAll(Constants.CountryBaseUrl);
        DefaultStates = await stateService.GetAll(Constants.StateBaseUrl);
        DefaultCities = await cityService.GetAll(Constants.CityBaseUrl);

        DefaultGenders = await genderService.GetAll(Constants.GenderBaseUrl);
        

        DefaultGeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
        DefaultDepartments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
        DefaultBranches = await branchService.GetAll(Constants.BranchBaseUrl);
    }

    //country select
    private void HandleCountrySelectedEvent(int countryId) =>
    SelectedStates = DefaultStates.Where(c => c.CountryId == countryId).ToList();

    //city select
    private void HandleStateSelectedEvent(int stateId) =>
    SelectedCities = DefaultCities.Where(t => t.StateId == stateId).ToList();

    //General department select
    void HandleGeneralDepartmentSelectedEvent(int generalDpartmentId) =>
    SelectedDepartments = DefaultDepartments.Where(gd => gd.GeneralDepartmentId == generalDpartmentId).ToList();

    //Department select
    void HandleDepartmentSelectedEvent(int departmentId) =>
    SelectedBranches = DefaultBranches.Where(d => d.DepartmentId == departmentId).ToList();

    //Notify parent when Add or update employee form closes
    private async Task NotifyParentFormCloseClicked()
    {
        ShowMainPage = true;
        ShowAddOrUpdatePage = false;
        await LoadEmployees();
        SelectedEmployee = new();
    }

    //Load employees
    private async Task LoadEmployees() => Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);

    //Save Employee
    async Task HandleSaveEmployeeClickedEvent(Employee employee)
    {
        bool successCheck = false;
        if (employee.Id > 0)
        {
            var result = await employeeService.Update(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await employeeService.Insert(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
            addOrUpdateEmployee!.ClearContent();
    }

    public bool ShowMainPage { get; set; } = true;
    public bool ShowAddOrUpdatePage { get; set; } = false;
    void ShowAddOrUpdateEmployeeButtonClicked()
    {
        ShowMainPage = false;
        ShowAddOrUpdatePage = true;
    }

    //Context menu
    //Show Menu Pop Up
    ContextsMenu? contextMenu;
    public Employee SelectedEmployee { get; set; } = new();
    void ShowMenuPopUp(Employee employee)
    {
        SelectedEmployee = employee;
        contextMenu!.OpenContextMenu();
    }

    
    //Edit clicked
    void EditClicked()
    {
        //EmployeeGrouping1
        addOrUpdateEmployee!.Employee.Id = SelectedEmployee.Id;
        addOrUpdateEmployee!.EmployeeGroup1.Name = SelectedEmployee.Name;
        addOrUpdateEmployee!.EmployeeGroup1.Phone = SelectedEmployee.Phone;
        addOrUpdateEmployee!.EmployeeGroup1.EmpId = SelectedEmployee.EmpId;
        addOrUpdateEmployee!.EmployeeGroup1.Address = SelectedEmployee.Address;
        addOrUpdateEmployee!.EmployeeGroup1.Photo = SelectedEmployee.Photo;

        //EmployeeGroup2
        addOrUpdateEmployee!.EmployeeGroup2.JobName = SelectedEmployee.JobName;

        //General Department / Department / Branch
        addOrUpdateEmployee!.GeneralDepartment = SelectedEmployee.Branch!.Department!.GeneralDepartment!.Name;
        addOrUpdateEmployee!.Department = SelectedEmployee.Branch!.Department!.Name;
        addOrUpdateEmployee!.Branch = SelectedEmployee.Branch!.Name;

        //Country / State / Town
        addOrUpdateEmployee!.Country = SelectedEmployee.City!.States!.Country!.Name;
        addOrUpdateEmployee!.State = SelectedEmployee.City!.States!.Name;
        addOrUpdateEmployee!.City = SelectedEmployee.City!.Name;
        
        //Gender
        addOrUpdateEmployee!.Gender = SelectedEmployee.Gender!.Name;

        //Title
        addOrUpdateEmployee.Title = "Update";
        SelectedEmployee = new();
        contextMenu!.CloseContextMenu();
        ShowAddOrUpdatePage = true;
        ShowMainPage = false;
    }

    //Delete clicked
    private async Task DeleteClicked()
    {
        contextMenu!.CloseContextMenu();
        bool confirm = await dialogService
        .ConfirmAsync($"Are you sure you wanna delete {SelectedEmployee.Name}?", "Confirm Delete");
        if (!confirm) return;

        var response = await branchService.DeleteById(SelectedEmployee.Id, Constants.EmployeeBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
        {
            SelectedEmployee = new();
            await LoadEmployees();
        }
    }

    //View Clicked
    public bool ShowDetailsPage { get; set; } = false;
    private void ViewClicked()
    {
        Employee = SelectedEmployee;
        contextMenu!.CloseContextMenu();
        ShowDetailsPage = true;
        ShowMainPage = false;
        SelectedEmployee = new();
    }

    // private async Task GetOvertimeTypes() =>
    // OvertimeTypes = await overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);

    // private async Task GetSanctionTypes() =>
    // SanctionTypes = await sanctionTypeService.GetAll(Constants.SanctionTypeBaseUrl);

    // private async Task GetVacationTypes() =>
    // VacationTypes = await vacationTypeService.GetAll(Constants.VacationTypeBaseUrl);

    // Add Health clicked
    // DoctorDialog? doctorDialog;
    // Doctor Doctor = new();
    // private void AddHealthClicked()
    // {
    //     Doctor.EmployeeId = SelectedEmployee.Id;
    //     contextMenu!.CloseContextMenu();
    //     doctorDialog!.OpenDialog();

    // }

    //Save Health Handler
    // async Task SaveHealthEvent(Doctor item)
    // {
    //     item.EmployeeId = SelectedEmployee.Id;
    //     var (flag, message) = await doctorService.Insert(item, Constants.DoctorBaseUrl);
    //     var response = await DisplayMessage(flag, message);
    //     if (response)
    //     {
    //         SelectedEmployee = new();
    //         Doctor = new();
    //         doctorDialog!.CloseDialog();
    //     }
    // }



    // Add Overtime clicked
    // OvertimeDialog? overtimeDialog;
    // Overtime Overtime = new();
    // List<OvertimeType> OvertimeTypes = [];
    // private void AddOvertimeClicked()
    // {
    //     Overtime.EmployeeId = SelectedEmployee.Id;
    //     contextMenu!.CloseContextMenu();
    //     overtimeDialog!.OpenDialog();
    // }
    //Save Overtime Handler
    // async Task SaveOvertimeEvent(Overtime item)
    // {
    //     item.EmployeeId = SelectedEmployee.Id;
    //     var (flag, message) = await overtimeService.Insert(item, Constants.OvertimeBaseUrl);
    //     var response = await DisplayMessage(flag, message);
    //     if (response)
    //     {
    //         SelectedEmployee = new();
    //         Overtime = new();
    //         overtimeDialog!.CloseDialog();
    //     }
    // }




    // Add Sanction clicked
    // SanctionDialog? sanctionDialog;
    // Sanction Sanction = new();
    // List<SanctionType> SanctionTypes = [];
    // private void AddSanctionClicked()
    // {
    //     Sanction.EmployeeId = SelectedEmployee.Id;
    //     contextMenu!.CloseContextMenu();
    //     sanctionDialog!.OpenDialog();
    // }

    //Save Sanction Handler
    // async Task SaveSanctionEvent(Sanction item)
    // {
    //     item.EmployeeId = SelectedEmployee.Id;
    //     var (flag, message) = await sanctionService.Insert(item, Constants.SanctionBaseUrl);
    //     var response = await DisplayMessage(flag, message);
    //     if (response)
    //     {
    //         SelectedEmployee = new();
    //         Sanction = new();
    //         sanctionDialog!.CloseDialog();
    //     }
    // }



    // Add Vacation clicked
    // VacationDialog? vacationDialog;
    // Vacation Vacation = new();
    // List<VacationType> VacationTypes = [];
    // private void AddVacationClicked()
    // {
    //     Vacation.EmployeeId = SelectedEmployee.Id;
    //     contextMenu!.CloseContextMenu();
    //     vacationDialog!.OpenDialog();
    // }

    //Save Vacation Handler
    // async Task SaveVacationEvent(Vacation item)
    // {
    //     item.EmployeeId = SelectedEmployee.Id;
    //     var (flag, message) = await vacationService.Insert(item, Constants.VacationBaseUrl);
    //     var response = await DisplayMessage(flag, message);
    //     if (response)
    //     {
    //         SelectedEmployee = new();
    //         Vacation = new();
    //         vacationDialog!.CloseDialog();
    //     }
    // }



    //Details employee Close btn clicked
    void HandleDetailsPageCloseBtnClicked()
    {
        ShowDetailsPage = false;
        ShowMainPage = true;
    }

    //Excel export / PDF Export
    // public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    // {
    //     if (args.Item.Text == "Excel Export")
    //         await this.DefaultGrid!.ExcelExport()!;

    //     if (args.Item.Text == "PDF Export")
    //         await this.DefaultGrid!.PdfExport()!;
    // }


    //Display message using dialog service
    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose() => allState.Action -= StateHasChanged;

}
