@implements IDisposable
@if (allState.ShowEmployee)
{
    if (ShowAddOrUpdateEmployee)
    {
        <div class="container">
            <div class="row mt-5">
                <div class="col-lg-1 text-center">
                    <i class="bi bi-x-lg fs-3 fw-bold text-danger" style="cursor:pointer" @onclick="CloseForm"></i>
                </div>
                <div class="col-lg-6 text-center"><h2>@Title Employee</h2></div>
            </div>

            <div class="row">
                <div class="col-lg-12 mt-2 mb-5 d-flex justify-content-center">
                    <div class="hstack">
                        @if (FirstLayer)
                        {
                            <div class="@FloatingNumber1 text-center">1</div>
                            <div class="@Floatingdiv1 format-border"></div>
                            <div class="@FloatingNumber2 text-center">2</div>
                            <div class="@Floatingdiv2 format-border"></div>
                        }
                        @if (SecondLayer)
                        {
                            <div class="@FloatingNumber1 text-center">1</div>
                            <div class="@Floatingdiv1 format-border"></div>
                            <div class="@FloatingNumber1 text-center">2</div>
                            <div class="@Floatingdiv1 format-border"></div>
                        }
                    </div>
                </div>

                @* //Employee form / first / second layers *@
                <div class="col-lg-12">
                    <div class="container-fluid">
                        @if (FirstLayer)
                        {
                            <EditForm Enhance Model="EmployeeGroup1" OnValidSubmit="Form1">
                                 <DataAnnotationsValidator />
                                 <div class="row">
                                     <div class="col-lg-2"></div>
                                     <div class="col-lg-4">
                                         <div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Personal Information</div>
                                         <div class="card-body">
                                             <div class="form-group">
                                                 <label class="form-label">Fullname</label>
                                                 <InputText @bind-Value="EmployeeGroup1.Name" class="form-control" />
                                                 <ValidationMessage For="()=>EmployeeGroup1.Name" class="text-danger" />
                                             </div>
                                             <div class="form-group mt-2">
                                                 <label class="form-label">Telephone</label>
                                                 <InputText @bind-Value="EmployeeGroup1.Phone" class="form-control" />
                                                 <ValidationMessage For="()=>EmployeeGroup1.Phone" class="text-danger" />
                                             </div>
                                             <div class="form-group mt-2">
                                                 <label class="form-label">Address</label>
                                                 <InputTextArea @bind-Value="EmployeeGroup1.Address" class="form-control" />
                                                 <ValidationMessage For="()=>EmployeeGroup1.Address" class="text-danger" />
                                             </div>
                                             <div class="form-control mt-2">
                                                 <img src="@EmployeeGroup1.Photo" width="100" height="100" />
                                             </div>
                                         </div>
                                     </div>
                                     <div class="col-lg-4 mt-2">
                                         <div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Other Information</div>
                                         <div class="card-body">
                                             <div class="form-group">
                                                 <label class="form-label">Employee Id</label>
                                                 <InputText @bind-Value="EmployeeGroup1.EmpId" class="form-control" />
                                                 <ValidationMessage For="()=>EmployeeGroup1.EmpId" class="text-danger" />
                                             </div>
                                             <div class="form-group mt-3">
                                                 <label class="form-label @(ImageUploadMessage == ""?"":"text-danger")">
                                                     @(ImageUploadMessage == "" ? "Upload Image" : ImageUploadMessage)
                                                 </label>
                                                 <InputFile class="form-control" OnChange="UploadImage"></InputFile>
                                                 <ValidationMessage For="()=>EmployeeGroup1.Photo" class="text-danger" />
                                             </div>
                                             <div class="form-group mt-5">
                                                 <button class="btn btn-primary float-end mt-4 mb-5" type="submit">
                                                     <i class="bi bi-arrow-right"></i>
                                                     Next
                                                 </button>
                                             </div>
                                         </div>
                                     </div>
                                     <div class="col-lg-2"></div>
                                 </div>
                             </EditForm>
                        }
                        @if (SecondLayer)
                        {
                            @* Employee Gropu 2 *@
                            <EditForm Enhance Model="EmployeeGroup2" OnValidSubmit="Form2">
                                 <DataAnnotationsValidator />
                                 <div class="row">
                                     <div class="col-lg-2"></div>
                                     <div class="col-lg-4">
                                         <div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Job Information</div>
                                         <div class="card-body">
                                             <div class="form-group">
                                                 <label class="form-label">Job Title</label>
                                                 <InputText @bind-Value="EmployeeGroup2.JobName" class="form-control" />
                                                 <ValidationMessage For="()=>EmployeeGroup2.JobName" class="text-danger" />
                                             </div>
                                             <div class="form-group mt-2">
                                                 @{
                                                    string generalDepartment = GeneralDepartment.Equals("") ? "Select General Department" : GeneralDepartment;
                                                }
                                                <label class="form-label"> Select General Department </label>
                                                <SfDropDownList TValue="string" TItem="GeneralDepartment" Placeholder="@generalDepartment" DataSource="GeneralDepartments">
                                                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="GeneralDepartment" ValueChange="OnGeneralDepartmentValueChange"></DropDownListEvents>
                                                </SfDropDownList>

                                            </div>
                                            <div class="form-group mt-3">
                                                @{
                                                    string department = Department.Equals("") ? "Select Department" : Department;
                                                }
                                                <label class="form-label"> Select Department </label>
                                                <SfDropDownList TValue="string" TItem="Department" Placeholder="@department" DataSource="Departments">
                                                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="Department" ValueChange="OnDepartmentValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-3">
                                                <label class="form-label"> Select Branch </label>
                                                @{
                                                    string branch = Branch.Equals("") ? "Select Branch" : Branch;
                                                }
                                                <SfDropDownList TValue="string" TItem="Branch" Placeholder="@branch" DataSource="Branches">
                                                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="Branch" ValueChange="OnBranchValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                                <ValidationMessage For="()=>EmployeeGroup2.BranchId" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-4 mb-5">
                                                <button class="btn btn-primary float-start" type="buton" @onclick="PrevClicked">
                                                    <i class="bi bi-arrow-left"></i>
                                                    Prev
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-4">
                                        <div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Location Information</div>
                                        <div class="card-body">
                                            <div class="form-group">
                                                <label class="form-label"> Select Country </label>
                                                @{
                                                    string country = Country.Equals("") ? "Select Country" : Country;
                                                }
                                                <SfDropDownList TValue="string" TItem="Country" Placeholder="@country" DataSource="Countries">
                                                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="Country" ValueChange="OnCountryValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-3">
                                                <label class="form-label"> Select state </label>
                                                @{
                                                    string state = State.Equals("") ? "Select State" : State;
                                                }
                                                <SfDropDownList TValue="string" TItem="State" Placeholder="@state" DataSource="States">
                                                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="State" ValueChange="OnStateValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-3">
                                                <label class="form-label"> Select City</label>
                                                @{
                                                    string city = City.Equals("") ? "Select City" : City;
                                                }
                                                <SfDropDownList TValue="string" TItem="City" Placeholder="@city" DataSource="Cities">
                                                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="City" ValueChange="OnCityValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                                <ValidationMessage For="()=>EmployeeGroup2.CityId" class="text-danger" />
                                            </div>
                                            <div class="form-group">
                                                <label class="form-label"> Select Gender </label>
                                                @{
                                                    string gender = Gender.Equals("") ? "Select Gender" : Gender;
                                                }
                                                <SfDropDownList TValue="string" TItem="Gender" Placeholder="@gender" DataSource="Genders">
                                                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="Gender" ValueChange="OnGenderValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-4 mb-5">
                                                <button class="btn btn-success float-end" type="submit">
                                                    <i class="bi bi-save"></i>
                                                    Save
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-2"></div>
                                </div>
                            </EditForm>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
}

<style>
    .floatingDiv {
        width: 500px;
        background: #228ada;
        height: 10px;
    }

    .floatingNumber {
        border-radius: 50%;
        color: white;
        background: #1d1858;
        width: 20px;
        height: 20px;
    }

    .inactive-div {
        width: 500px;
        background: gray;
        height: 10px;
    }

    .inactive-span {
        border-radius: 50%;
        color: white;
        background: gray;
        width: 20px;
        height: 20px;
    }

    .format-border {
        border-radius: 20px;
    }

</style>

@code {

    [Parameter] public Employee Employee { get; set; } = new();

    [Parameter] public bool ShowAddOrUpdateEmployee { get; set; }
    [Parameter] public EmployeeGrouping1 EmployeeGroup1 { get; set; } = new();
    [Parameter] public EmployeeGrouping2 EmployeeGroup2 { get; set; } = new();

    [Parameter] public List<Country> Countries { get; set; } = new();
    [Parameter] public List<State> States { get; set; } = new();
    [Parameter] public List<City> Cities { get; set; } = new();

    [Parameter] public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
    [Parameter] public List<Department> Departments { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();

    [Parameter] public List<Gender> Genders { get; set; } = new();

    string FloatingNumber1 = "floatingNumber";
    string Floatingdiv1 = "floatingDiv";

    string FloatingNumber2 = "inactive-span";
    string Floatingdiv2 = "inactive-div";

    public bool FirstLayer { get; set; } = true;
    public bool SecondLayer { get; set; } = false;

    public string Title { get; set; } = "Add";
    public string GeneralDepartment { get; set; } = "";
    public string Department { get; set; } = "";
    public string Branch { get; set; } = "";
    public string Country { get; set; } = "";
    public string State { get; set; } = "";
    public string City { get; set; } = "";
    public string Gender { get; set; } = "";

    private void ShowLayer2()
    {
        FirstLayer = false;
        SecondLayer = true;
    }

    void PrevClicked()
    {
        FirstLayer = true;
        SecondLayer = false;
    }

    //Form closed
    [Parameter] public EventCallback NotifyParentFormCloseClicked { get; set; }
    async Task CloseForm()
    {
        ShowAddOrUpdateEmployee = false;
        await NotifyParentFormCloseClicked.InvokeAsync();
    }
    //File Upload
    string ImageUploadMessage = "";
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        if (e.File.Name.ToLower().Contains(".png"))
        {
            var format = "image/png";
            var resizeImage = await e.File.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            ImageUploadMessage = "";
            EmployeeGroup1.Photo = imageData;
            imageData = "";
            return;
        }
        ImageUploadMessage = "PNG file needed.";
        return;
    }

    //Forms Validations
    // Form 1
    private bool ValidateEmployeeGroup1()
    {
        if (string.IsNullOrEmpty(EmployeeGroup1.Name)
        || string.IsNullOrEmpty(EmployeeGroup1.Phone)
        || string.IsNullOrEmpty(EmployeeGroup1.Address)
        || string.IsNullOrEmpty(EmployeeGroup1.Photo)
        || string.IsNullOrEmpty(EmployeeGroup1.EmpId))
            return false;
        else
            return true;
    }

    //form 2
    private bool ValidateEmployeeGroup2()
    {
        if (string.IsNullOrEmpty(EmployeeGroup2.JobName)
        || EmployeeGroup2.CityId == 0
        || EmployeeGroup2.BranchId == 0
        || EmployeeGroup2.GenderId == 0)
            return false;
        else
            return true;
    }

    // Save forms
    [Parameter] public EventCallback<Employee> HandleSaveEmployeeClickedEvent { get; set; }
    private void Form1()
    {
        var isValid = ValidateEmployeeGroup1();
        if (isValid)
        {
            Employee.Name = EmployeeGroup1.Name;
            Employee.Phone = EmployeeGroup1.Phone;
            Employee.Address = EmployeeGroup1.Address;
            Employee.EmpId = EmployeeGroup1.EmpId;
            Employee.Photo = EmployeeGroup1.Photo;
            ShowLayer2();
        }
    }
    private async Task Form2()
    {
        var isValid = ValidateEmployeeGroup2();
        if (isValid)
        {
            Employee.JobName = EmployeeGroup2.JobName;
            Employee.BranchId = EmployeeGroup2.BranchId;
            Employee.CityId = EmployeeGroup2.CityId;
            Employee.GenderId = EmployeeGroup2.GenderId;

            await HandleSaveEmployeeClickedEvent.InvokeAsync(Employee);
        }
    }

    public void ClearContent()
    {
        Employee = new();
        EmployeeGroup1 = new();
        EmployeeGroup2 = new();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        allState.Action += StateHasChanged;
    }

    //Country // City // Town

    [Parameter] public EventCallback<int> HandleCountrySelectedEvent { get; set; }
    public void OnCountryValueChange(ChangeEventArgs<string, Country> args) =>
    HandleCountrySelectedEvent.InvokeAsync(int.Parse(args.Value));

    [Parameter] public EventCallback<int> HandleStateSelectedEvent { get; set; }
    public async Task OnStateValueChange(ChangeEventArgs<string, State> args) =>
    await HandleStateSelectedEvent.InvokeAsync(int.Parse(args.Value));

    public void OnCityValueChange(ChangeEventArgs<string, City> args) => EmployeeGroup2.CityId = int.Parse(args.Value);

    //Gender
    public void OnGenderValueChange(ChangeEventArgs<string, Gender> args) => EmployeeGroup2.GenderId = int.Parse(args.Value);

    // General Department //Department  // Branch
    [Parameter] public EventCallback<int> HandleGeneralDepartmentSelectedEvent { get; set; }
    async Task OnGeneralDepartmentValueChange(ChangeEventArgs<string, GeneralDepartment> args) =>
    await HandleGeneralDepartmentSelectedEvent.InvokeAsync(int.Parse(args.Value));

    [Parameter] public EventCallback<int> HandleDepartmentSelectedEvent { get; set; }
    async Task OnDepartmentValueChange(ChangeEventArgs<string, Department> args) =>
    await HandleDepartmentSelectedEvent.InvokeAsync(int.Parse(args.Value));

    public void OnBranchValueChange(ChangeEventArgs<string, Branch> args) => EmployeeGroup2.BranchId = int.Parse(args.Value);

    public void Dispose() => allState.Action -= StateHasChanged;
}